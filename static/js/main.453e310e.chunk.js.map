{"version":3,"sources":["algorithms/Utility.js","algorithms/QuickSort.js","algorithms/MergeSort.js","files/SortVisualizer.jsx","algorithms/InsertionSort.js","App.js","reportWebVitals.js","index.js"],"names":["swap","arr","index1","index2","temp","getQuickSortAnimations","copy","animations","quickSortHelper","length","left","right","part","i","j","pivot","push","partition","getMergeSortAnimations","len","mergeSortHelper","Array","aux","mid","Math","floor","k","merge","SORTED_COLOUR","SortVisualizer","props","useState","setArr","isSorting","setIsSorting","isSorted","setIsSorted","containerRef","useRef","initialiseArray","resetArrayColour","shuffle","animateArrayUpdate","forEach","index","comparison","swapped","setTimeout","prevArr","newValue","newArr","animateArrayAccess","arrayBars","current","children","arrayBarStyle","style","backgroundColor","animateSortedArray","DELAY","useEffect","className","ref","map","barHeight","height","width","onClick","getInsertionSortAnimations","randomIndex","random","App","classname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.453e310e.chunk.js","sourcesContent":["export function swap(arr, index1, index2) {\r\n  const temp = arr[index1];\r\n  arr[index1] = arr[index2];\r\n  arr[index2] = temp;\r\n}\r\n","import { swap } from './Utility';\r\n\r\nexport function getQuickSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const animations = [];\r\n  quickSortHelper(copy, 0, copy.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(arr, left, right, animations) {\r\n  if (right <= left) return;\r\n  const part = partition(arr, left, right, animations);\r\n  quickSortHelper(arr, left, part, animations);\r\n  quickSortHelper(arr, part + 1, right, animations);\r\n}\r\n\r\nfunction partition(arr, left, right, animations) {\r\n  let i = left;\r\n  let j = right + 1;\r\n  const pivot = arr[left];\r\n  while (true) {\r\n    while (arr[++i] <= pivot) {\r\n      if (i === right) break;\r\n      animations.push([[i], false]);\r\n    }\r\n    while (arr[--j] >= pivot) {\r\n      if (j === left) break;\r\n      animations.push([[j], false]);\r\n    }\r\n    if (j <= i) break;\r\n    animations.push([[i, arr[j]], true]);\r\n    animations.push([[j, arr[i]], true]);\r\n    swap(arr, i, j);\r\n  }\r\n  animations.push([[left, arr[j]], true]);\r\n  animations.push([[j, arr[left]], true]);\r\n  swap(arr, left, j);\r\n  return j;\r\n}\r\n","export function getMergeSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const len = copy.length;\r\n  const aux = Array(len);\r\n  const animations = [];\r\n  mergeSortHelper(copy, aux, 0, len - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(arr, aux, left, right, animations) {\r\n  if (right <= left) return;\r\n  const mid = left + Math.floor((right - left) / 2);\r\n  mergeSortHelper(arr, aux, left, mid, animations);\r\n  mergeSortHelper(arr, aux, mid + 1, right, animations);\r\n  merge(arr, aux, left, mid, right, animations);\r\n}\r\n\r\nfunction merge(arr, aux, left, mid, right, animations) {\r\n  for (let i = left; i <= right; i++) aux[i] = arr[i];\r\n  let i = left;\r\n  let j = mid + 1;\r\n  for (let k = left; k <= right; k++) {\r\n    if (i > mid) {\r\n      animations.push([[j], false]);\r\n      animations.push([[k, aux[j]], true]);\r\n      arr[k] = aux[j++];\r\n    } else if (j > right) {\r\n      animations.push([[i], false]);\r\n      animations.push([[k, aux[i]], true]);\r\n      arr[k] = aux[i++];\r\n    } else if (aux[j] < aux[i]) {\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[j]], true]);\r\n      arr[k] = aux[j++];\r\n    } else {\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[i]], true]);\r\n      arr[k] = aux[i++];\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport './SortVisualizer.css';\r\nimport { getQuickSortAnimations } from '../algorithms/QuickSort';\r\nimport { getInsertionSortAnimations } from '../algorithms/InsertionSort';\r\nimport { getMergeSortAnimations } from '../algorithms/MergeSort';\r\n\r\nconst ARR_LEN = 100;\r\nconst MIN_NUM = 5;\r\nconst MAX_NUM = 80;\r\nconst DELAY = 5;\r\nconst ACCESSED_COLOUR = 'turquoise';\r\nconst SORTED_COLOUR = 'green';\r\n\r\nexport default function SortVisualizer(props) {\r\n  const [arr, setArr] = useState([]);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(initialiseArray, []);\r\n\r\n  function initialiseArray() {\r\n    if (isSorting) return;\r\n    if (isSorted) resetArrayColour();\r\n    setIsSorted(false);\r\n    const arr = [];\r\n    for (let i = 0; i < ARR_LEN; i++) {\r\n      arr.push((MAX_NUM - MIN_NUM) * (i / ARR_LEN) + MIN_NUM);\r\n    }\r\n    shuffle(arr);\r\n    setArr(arr);\r\n  }\r\n\r\n  function mergeSort() {\r\n    const animations = getMergeSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function insertionSort() {\r\n    const animations = getInsertionSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function quickSort() {\r\n    const animations = getQuickSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function animateArrayUpdate(animations) {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    animations.forEach(([comparison, swapped], index) => {\r\n      setTimeout(() => {\r\n        if (!swapped) {\r\n          if (comparison.length === 2) {\r\n            const [i, j] = comparison;\r\n            animateArrayAccess(i);\r\n            animateArrayAccess(j);\r\n          } else {\r\n            const [i] = comparison;\r\n            animateArrayAccess(i);\r\n          }\r\n        } else {\r\n          setArr((prevArr) => {\r\n            const [k, newValue] = comparison;\r\n            const newArr = [...prevArr];\r\n            newArr[k] = newValue;\r\n            return newArr;\r\n          });\r\n        }\r\n      }, index * DELAY);\r\n    });\r\n    setTimeout(() => {\r\n      animateSortedArray();\r\n    }, animations.length * DELAY);\r\n  }\r\n\r\n  function animateArrayAccess(index) {\r\n    const arrayBars = containerRef.current.children;\r\n    const arrayBarStyle = arrayBars[index].style;\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n    }, DELAY);\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = '';\r\n    }, DELAY * 2);\r\n  }\r\n\r\n  function animateSortedArray() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      setTimeout(\r\n        () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n        i * DELAY,\r\n      );\r\n    }\r\n    setTimeout(() => {\r\n      setIsSorted(true);\r\n      setIsSorting(false);\r\n    }, arrayBars.length * DELAY);\r\n  }\r\n\r\n  function resetArrayColour() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      arrayBarStyle.backgroundColor = '';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"visualizer-container\">\r\n      <div className=\"array-container\" ref={containerRef}>\r\n        {arr.map((barHeight, index) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            style={{\r\n              height: `${barHeight}vmin`,\r\n              width: `${100 / ARR_LEN}vw`,\r\n            }}\r\n            key={index}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      <footer className=\"app-footer\">\r\n        <ul>\r\n          <li>\r\n            <button className=\"app-button\" onClick={initialiseArray}>\r\n              Create new array\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"app-button\" onClick={mergeSort}>\r\n              Merge sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"app-button\" onClick={insertionSort}>\r\n              Insertion sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"app-button\" onClick={quickSort}>\r\n              Quick sort\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst shuffle = (arr) => {\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    const temp = arr[i];\r\n    arr[i] = arr[randomIndex];\r\n    arr[randomIndex] = temp;\r\n  }\r\n};\r\n","import { swap } from \"./Utility\";\r\n\r\nexport function getInsertionSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const animations = [];\r\n  for (let i = 1; i < copy.length; i++) {\r\n    for (let j = i - 1; j >= 0; j--) {\r\n      animations.push([[j, j + 1], false]);\r\n      if (copy[j + 1] < copy[j]) {\r\n        animations.push([[j, copy[j + 1]], true]);\r\n        animations.push([[j + 1, copy[j]], true]);\r\n        swap(copy, j, j + 1);\r\n      } else break;\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n","import React from \"react\";\r\nimport SortVisualizer from \"./files/SortVisualizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div classname=\"App\">\r\n      <SortVisualizer/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}